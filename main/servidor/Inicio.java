/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imagina.servidoremapasc;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.Socket;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import org.apache.catalina.Context;
import org.apache.catalina.LifecycleException;
import org.apache.catalina.startup.Tomcat;

/**
 *
 * @author jairo
 */
public class Inicio extends javax.swing.JFrame {

    String enlace, msg, appBase = ".";
    Tomcat tomcat;
    int port = 3020, x, y, x1, y1;
    Image img, img1;
    File docBase;
    boolean click;

    public Inicio() {
        initComponents();
        this.setTitle("SERVIDOR");
        boolean usando = isPortInUse();
        int portInicial = port;
        while (usando) {
            port = port - 1;
            if (port < 2020) {
                port = 3030;
            } else if (port == portInicial) {
                System.out.println("No existen puertos disponibles");
                System.exit(0);
            }
            usando = isPortInUse();
        }
        x = this.getWidth();
        y = this.getHeight();
        x1 = x / 2 - 94;//104
        y1 = y - 15;
        click = false;
        try {
            File file = new File(appBase);
            docBase = new File(file.getCanonicalPath() + "/Archivos");
            if (!docBase.exists()) {
                docBase.mkdirs();
            }
            cargarImagenes();
        } catch (IOException ex) {
            System.out.println(ex.toString());
        }
        iniciarServidor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 300));
        setSize(new java.awt.Dimension(600, 300));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        int wx = evt.getX();
        int hy = evt.getY();
        int dx = wx - x1;
        int dy = 20 + hy - y1;
        int dx1 = wx - 28;
        int dy1 = hy + 30 - y / 2;
        if (dx >= 0 && dx < 209 && dy >= 0) {
            StringSelection stringSelection = new StringSelection(msg);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
            msg = "COPIADO";
            repaint();
            correrHilo();
        } else if (dx1 >= 0 && dx1 < 72 && dy1 >= 0 && dy1 < 95) {
            click = true;
            try {
                paint(this.getGraphics());
                Thread.sleep(90);
                tomcat.stop();
                tomcat.destroy();
                tomcat = null;
                iniciarServidor();
            } catch (LifecycleException | InterruptedException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_formMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paint(Graphics g) {
        Graphics2D d = (Graphics2D) g;
        if (img != null) {
            g.drawImage(img, 0, 0, null);
        }
        d.setColor(Color.WHITE);
        d.drawString("Â© Jairo Cabrera Pino", this.getWidth() - 130, this.getHeight() - 15);
        if (click) {
            d.setColor(new Color(204, 204, 204));
            click = false;
        }
        d.setStroke(new BasicStroke(3));
        int r = 15;
        int n = 2 * r;
        int n1 = 0;
        int n2 = 0;
        int xn[] = new int[n + 1];
        int yn[] = new int[n + 1];
        int xn1[] = new int[n + 1];
        int yn1[] = new int[n + 1];
        int xn2[] = new int[n + 1];
        int yn2[] = new int[n + 1];
        int ax = r + 45;
        int by = y / 2;
        double exp = 2 * r / n;
        for (int i = 0; i < n + 1; i++) {
            xn[i] = (int) (r - i * exp);
            yn[i] = (int) (Math.sqrt(Math.pow(r, 2) - Math.pow(xn[i], 2)));
            if (Math.abs(xn[i]) > r / 3) {
                if (xn[i] < 0) {
                    xn1[n1] = xn[i] + ax;
                    yn1[n1] = by - yn[i];
                    n1++;
                } else {
                    xn2[n2] = xn[i] + ax;
                    yn2[n2] = by - yn[i];
                    n2++;
                }
            }
            xn[i] = xn[i] + ax;
            yn[i] = by + yn[i];
        }
        for (int i = 0; i < n; i++) {
            d.drawLine(xn[i], yn[i], xn[i + 1], yn[i + 1]);
        }
        for (int i = 0; i < n1 - 1; i++) {
            d.drawLine(xn1[i], yn1[i], xn1[i + 1], yn1[i + 1]);
        }
        for (int i = 0; i < n2 - 1; i++) {
            d.drawLine(xn2[i], yn2[i], xn2[i + 1], yn2[i + 1]);
        }
        int h = r * 5 / 4;
        int w = h / 4;
        d.fillRect(ax - w / 2, by - r - h / 5, w, h);
        d.drawOval(ax - 30, by - 30, 60, 60);
        d.drawString("REINICIAR", ax - 30, by + 50);
        g.setFont(new Font("Tahoma", Font.PLAIN, 20));
        d.setColor(Color.GREEN);
        if (tomcat == null) {
            d.setColor(Color.RED);
        }
        g.drawString(msg, x1, y1);
    }

    private void iniciarServidor() {
        System.out.println("Iniciando servidor");
        new Thread() {
            @Override
            public void run() {
                tomcat = new Tomcat();
                tomcat.setPort(port);
                tomcat.setHostname("localhost");
                tomcat.getHost().setAppBase(appBase);
                Context context = tomcat.addContext("", docBase.getAbsolutePath());
                ServidorDescargarCargar servlet = new ServidorDescargarCargar();
                Tomcat.addServlet(context, servlet.getClass().getSimpleName(), servlet.getClass().getName());
                context.addServletMappingDecoded("", servlet.getClass().getSimpleName());
                try {
                    tomcat.start();
                    repaint();
                    tomcat.getServer().await();
                } catch (LifecycleException ex) {
                    tomcat = null;
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private boolean isPortInUse() {
        try {
            while (enlace == null || enlace.isEmpty()) {
                Enumeration e = NetworkInterface.getNetworkInterfaces();
                while (e.hasMoreElements()) {
                    NetworkInterface n = (NetworkInterface) e.nextElement();
                    Enumeration ee = n.getInetAddresses();
                    while (ee.hasMoreElements()) {
                        InetAddress i = (InetAddress) ee.nextElement();
                        String add = i.getHostAddress();
                        if (add.startsWith("192.168.0") || add.startsWith("192.168.1")) {
                            enlace = add;
                        }
                    }
                }
            }
            new Socket(enlace, port).close();
            return true;
        } catch (IOException ex) {
            msg = enlace + ":" + String.valueOf(port);
            return false;
        }
    }

    private void cargarImagenes() {
        try {
            img = ImageIO.read(ClassLoader.getSystemResourceAsStream("background.jpg")).getScaledInstance(this.getWidth(), this.getHeight(), Image.SCALE_SMOOTH);
        } catch (IOException ex) {
            img = null;
            System.out.println("IMAGEN DE FONDO NO ENCONTRADA");
        }
    }

    private void correrHilo() {
        new Thread() {
            @Override
            public void run() {
                try {
                    Thread.sleep(1500);
                    msg = enlace + ":" + String.valueOf(port);
                    repaint();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }
}
